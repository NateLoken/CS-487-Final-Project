# -*- coding: utf-8 -*-
"""Bitcoin Price attributes prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l7jyA_SWz57zuCS29nF09hhZnTkS1ZNl
"""

import pandas as pd       
from fbprophet import Prophet

import plotly.offline as py           
import plotly.graph_objs as go        
import plotly.express as px

import plotly.io as pio
pio.renderers.default = 'colab'

"""## Task 1 :Data *Visualization*"""

from google.colab import files
uploaded = files.upload()

df_bitcoin = pd.read_csv('bitcoin_data.csv')

df_bitcoin

# Bitcoin specific Area graph
px.area(df_bitcoin, x="Date", y="Close")

px.line(df_bitcoin, x="Date", y="Volume")

# Bitcoin specific Violin plot
px.violin(df_bitcoin,  y="Volume")

# CandleStick Charts- Financial data visualization
fig = go.Figure(go.Candlestick(
                            x=df_bitcoin["Date"],
                            open=df_bitcoin['Open'],
                            high=df_bitcoin['High'],
                            low=df_bitcoin['Low'],
                            close=df_bitcoin['Close']
                            ))

fig.show()

"""## Task 2:  Data Prediction & Perfromance measure"""

def doCalculation(column2):
 print('\n\nPridiction starting for  : '+column2+ ' price')
 columns = ["Date", column2 ]
 df1 = pd.DataFrame(df_bitcoin, columns=columns)
 prophet_df = df1.rename(columns={"Date":'ds', column2:'y'})
 m = Prophet()


 import timeit
 #print('Run Time for fitting :')
 start = timeit.timeit()
 
 m.fit(prophet_df)

 end = timeit.timeit()
 
 #print(" running time for training :", start  -end )



 future = m.make_future_dataframe(periods=364)
 forecast = m.predict(future)
 #print(forecast.head(10))

 print('\n\nForecasted values : ')
 features = ['ds', 'trend']
 forecastN = forecast[features]
 print(forecastN)

 print("\nrunning time for training :", end - start) 
 print('\nForecasted values of coming days for : '+column2)
 fafaffa=forecast.tail(10)
 print(forecast[['ds', 'trend']].tail(10))

 figure = m.plot(forecast, xlabel='date', ylabel=column2)
 figure2 = m.plot_components(forecast)

 df=df_bitcoin
 metric_df = forecast.set_index('ds')
 #print("Predicated: "+ metric_df[['trend']])
 metric_df2 = df_bitcoin.set_index("Date")
 #print("Actual: "+metric_df2[[column2]])
 matrix_predictaedvalue_actualvalue=metric_df[['trend']].join(metric_df2[[column2]])

 #print(matrix_predictaedvalue_actualvalue)

 matrix_predictaedvalue_actualvalue.dropna(inplace=True)
 print('\n\nPredicated_value(trend) VS actual_value(close) : ')
 print(matrix_predictaedvalue_actualvalue)

 from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
 print("\n\naccuracy : ",r2_score(matrix_predictaedvalue_actualvalue['trend'], matrix_predictaedvalue_actualvalue[column2]))
 print("mean_squared_error : ",mean_squared_error(matrix_predictaedvalue_actualvalue['trend'], matrix_predictaedvalue_actualvalue[column2]))
 print("mean_absolute_error: ",mean_absolute_error(matrix_predictaedvalue_actualvalue['trend'], matrix_predictaedvalue_actualvalue[column2]))
 print('\n\n')

 filename='forecast_'+column2+'.csv'
 forecast.to_csv(filename)
 files.download(filename)

doCalculation('Close')

doCalculation('High')

doCalculation('Open')

doCalculation('Low')

doCalculation('Adj Close')

